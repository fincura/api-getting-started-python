# coding: utf-8

"""
    Fincura Integration API

    This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fincura.configuration import Configuration


class Borrower(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'name': 'str',
        'created_date': 'datetime',
        'portfolio_uuid': 'str',
        'external_id': 'str',
        'contact_email': 'str',
        'contact_person': 'str',
        'contact_phone': 'str',
        'sic_code': 'str',
        'naics_code': 'str',
        'sic_industry': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'created_date': 'created_date',
        'portfolio_uuid': 'portfolio_uuid',
        'external_id': 'external_id',
        'contact_email': 'contact_email',
        'contact_person': 'contact_person',
        'contact_phone': 'contact_phone',
        'sic_code': 'sic_code',
        'naics_code': 'naics_code',
        'sic_industry': 'sic_industry'
    }

    def __init__(self, uuid=None, name=None, created_date=None, portfolio_uuid=None, external_id=None, contact_email=None, contact_person=None, contact_phone=None, sic_code=None, naics_code=None, sic_industry=None, local_vars_configuration=None):  # noqa: E501
        """Borrower - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._name = None
        self._created_date = None
        self._portfolio_uuid = None
        self._external_id = None
        self._contact_email = None
        self._contact_person = None
        self._contact_phone = None
        self._sic_code = None
        self._naics_code = None
        self._sic_industry = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.name = name
        if created_date is not None:
            self.created_date = created_date
        if portfolio_uuid is not None:
            self.portfolio_uuid = portfolio_uuid
        self.external_id = external_id
        if contact_email is not None:
            self.contact_email = contact_email
        self.contact_person = contact_person
        self.contact_phone = contact_phone
        self.sic_code = sic_code
        self.naics_code = naics_code
        if sic_industry is not None:
            self.sic_industry = sic_industry

    @property
    def uuid(self):
        """Gets the uuid of this Borrower.  # noqa: E501


        :return: The uuid of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Borrower.


        :param uuid: The uuid of this Borrower.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Borrower.  # noqa: E501

        Name of the Borrower. Must be unique across Borrower records  # noqa: E501

        :return: The name of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Borrower.

        Name of the Borrower. Must be unique across Borrower records  # noqa: E501

        :param name: The name of this Borrower.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 500):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `500`")  # noqa: E501

        self._name = name

    @property
    def created_date(self):
        """Gets the created_date of this Borrower.  # noqa: E501


        :return: The created_date of this Borrower.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Borrower.


        :param created_date: The created_date of this Borrower.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def portfolio_uuid(self):
        """Gets the portfolio_uuid of this Borrower.  # noqa: E501

        UUID of the Portfolio for this Borrower. (see [Portfolios](#tag/Portfolios))  # noqa: E501

        :return: The portfolio_uuid of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_uuid

    @portfolio_uuid.setter
    def portfolio_uuid(self, portfolio_uuid):
        """Sets the portfolio_uuid of this Borrower.

        UUID of the Portfolio for this Borrower. (see [Portfolios](#tag/Portfolios))  # noqa: E501

        :param portfolio_uuid: The portfolio_uuid of this Borrower.  # noqa: E501
        :type: str
        """

        self._portfolio_uuid = portfolio_uuid

    @property
    def external_id(self):
        """Gets the external_id of this Borrower.  # noqa: E501

        External ID is used to uniquely identify a record from your system in our system. Must be unique across records.  # noqa: E501

        :return: The external_id of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Borrower.

        External ID is used to uniquely identify a record from your system in our system. Must be unique across records.  # noqa: E501

        :param external_id: The external_id of this Borrower.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 250):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `250`")  # noqa: E501

        self._external_id = external_id

    @property
    def contact_email(self):
        """Gets the contact_email of this Borrower.  # noqa: E501

        Borrower contact email  # noqa: E501

        :return: The contact_email of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Borrower.

        Borrower contact email  # noqa: E501

        :param contact_email: The contact_email of this Borrower.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_person(self):
        """Gets the contact_person of this Borrower.  # noqa: E501

        Borrower contact Full Name  # noqa: E501

        :return: The contact_person of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this Borrower.

        Borrower contact Full Name  # noqa: E501

        :param contact_person: The contact_person of this Borrower.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_person is not None and len(contact_person) > 100):
            raise ValueError("Invalid value for `contact_person`, length must be less than or equal to `100`")  # noqa: E501

        self._contact_person = contact_person

    @property
    def contact_phone(self):
        """Gets the contact_phone of this Borrower.  # noqa: E501

        Borrower contact Phone Number  # noqa: E501

        :return: The contact_phone of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this Borrower.

        Borrower contact Phone Number  # noqa: E501

        :param contact_phone: The contact_phone of this Borrower.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_phone is not None and len(contact_phone) > 100):
            raise ValueError("Invalid value for `contact_phone`, length must be less than or equal to `100`")  # noqa: E501

        self._contact_phone = contact_phone

    @property
    def sic_code(self):
        """Gets the sic_code of this Borrower.  # noqa: E501


        :return: The sic_code of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._sic_code

    @sic_code.setter
    def sic_code(self, sic_code):
        """Sets the sic_code of this Borrower.


        :param sic_code: The sic_code of this Borrower.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                sic_code is not None and len(sic_code) > 4):
            raise ValueError("Invalid value for `sic_code`, length must be less than or equal to `4`")  # noqa: E501

        self._sic_code = sic_code

    @property
    def naics_code(self):
        """Gets the naics_code of this Borrower.  # noqa: E501


        :return: The naics_code of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._naics_code

    @naics_code.setter
    def naics_code(self, naics_code):
        """Sets the naics_code of this Borrower.


        :param naics_code: The naics_code of this Borrower.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                naics_code is not None and len(naics_code) > 6):
            raise ValueError("Invalid value for `naics_code`, length must be less than or equal to `6`")  # noqa: E501

        self._naics_code = naics_code

    @property
    def sic_industry(self):
        """Gets the sic_industry of this Borrower.  # noqa: E501


        :return: The sic_industry of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._sic_industry

    @sic_industry.setter
    def sic_industry(self, sic_industry):
        """Sets the sic_industry of this Borrower.


        :param sic_industry: The sic_industry of this Borrower.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "AGRICULTURE_FORESTRY_FISHING", "MINING", "TRANSPORTATION_AND_PUBLIC_UTILITIES", "WHOLESALE_TRADE", "RETAIL_TRADE", "FINANCE_INSURANCE_REAL_ESTATE", "SERVICES", "PUBLIC_ADMINISTRATION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sic_industry not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sic_industry` ({0}), must be one of {1}"  # noqa: E501
                .format(sic_industry, allowed_values)
            )

        self._sic_industry = sic_industry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Borrower):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Borrower):
            return True

        return self.to_dict() != other.to_dict()
