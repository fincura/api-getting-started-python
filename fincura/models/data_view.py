# coding: utf-8

"""
    Fincura Integration API

    This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fincura.configuration import Configuration


class DataView(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'borrower_uuid': 'str',
        'columns': 'list[DataViewColumns]',
        'rows': 'list[DataViewRows]'
    }

    attribute_map = {
        'title': 'title',
        'borrower_uuid': 'borrower_uuid',
        'columns': 'columns',
        'rows': 'rows'
    }

    def __init__(self, title=None, borrower_uuid=None, columns=None, rows=None, local_vars_configuration=None):  # noqa: E501
        """DataView - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._borrower_uuid = None
        self._columns = None
        self._rows = None
        self.discriminator = None

        self.title = title
        self.borrower_uuid = borrower_uuid
        self.columns = columns
        self.rows = rows

    @property
    def title(self):
        """Gets the title of this DataView.  # noqa: E501


        :return: The title of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DataView.


        :param title: The title of this DataView.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def borrower_uuid(self):
        """Gets the borrower_uuid of this DataView.  # noqa: E501

        UUID of the borrower for this DataView. (see [Borrowers](#tag/Borrowers))  # noqa: E501

        :return: The borrower_uuid of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._borrower_uuid

    @borrower_uuid.setter
    def borrower_uuid(self, borrower_uuid):
        """Sets the borrower_uuid of this DataView.

        UUID of the borrower for this DataView. (see [Borrowers](#tag/Borrowers))  # noqa: E501

        :param borrower_uuid: The borrower_uuid of this DataView.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and borrower_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `borrower_uuid`, must not be `None`")  # noqa: E501

        self._borrower_uuid = borrower_uuid

    @property
    def columns(self):
        """Gets the columns of this DataView.  # noqa: E501


        :return: The columns of this DataView.  # noqa: E501
        :rtype: list[DataViewColumns]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DataView.


        :param columns: The columns of this DataView.  # noqa: E501
        :type: list[DataViewColumns]
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def rows(self):
        """Gets the rows of this DataView.  # noqa: E501


        :return: The rows of this DataView.  # noqa: E501
        :rtype: list[DataViewRows]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this DataView.


        :param rows: The rows of this DataView.  # noqa: E501
        :type: list[DataViewRows]
        """
        if self.local_vars_configuration.client_side_validation and rows is None:  # noqa: E501
            raise ValueError("Invalid value for `rows`, must not be `None`")  # noqa: E501

        self._rows = rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataView):
            return True

        return self.to_dict() != other.to_dict()
