# coding: utf-8

"""
    Fincura Integration API

    This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fincura.configuration import Configuration


class EmbeddedWorkflow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'document_file_uuid': 'str',
        'embed_type': 'str',
        'created_date': 'datetime',
        'exit_step': 'str',
        'redirect_url': 'str',
        'ui_controls': 'EmbeddedWorkflowUiControls',
        'loaded': 'bool',
        'load_workflow_url': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'document_file_uuid': 'document_file_uuid',
        'embed_type': 'embed_type',
        'created_date': 'created_date',
        'exit_step': 'exit_step',
        'redirect_url': 'redirect_url',
        'ui_controls': 'ui_controls',
        'loaded': 'loaded',
        'load_workflow_url': 'load_workflow_url'
    }

    def __init__(self, uuid=None, document_file_uuid=None, embed_type=None, created_date=None, exit_step=None, redirect_url=None, ui_controls=None, loaded=None, load_workflow_url=None, local_vars_configuration=None):  # noqa: E501
        """EmbeddedWorkflow - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._document_file_uuid = None
        self._embed_type = None
        self._created_date = None
        self._exit_step = None
        self._redirect_url = None
        self._ui_controls = None
        self._loaded = None
        self._load_workflow_url = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.document_file_uuid = document_file_uuid
        if embed_type is not None:
            self.embed_type = embed_type
        if created_date is not None:
            self.created_date = created_date
        if exit_step is not None:
            self.exit_step = exit_step
        self.redirect_url = redirect_url
        if ui_controls is not None:
            self.ui_controls = ui_controls
        if loaded is not None:
            self.loaded = loaded
        if load_workflow_url is not None:
            self.load_workflow_url = load_workflow_url

    @property
    def uuid(self):
        """Gets the uuid of this EmbeddedWorkflow.  # noqa: E501


        :return: The uuid of this EmbeddedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EmbeddedWorkflow.


        :param uuid: The uuid of this EmbeddedWorkflow.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def document_file_uuid(self):
        """Gets the document_file_uuid of this EmbeddedWorkflow.  # noqa: E501

        UUID of the DocumentFile for this workflow  # noqa: E501

        :return: The document_file_uuid of this EmbeddedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._document_file_uuid

    @document_file_uuid.setter
    def document_file_uuid(self, document_file_uuid):
        """Sets the document_file_uuid of this EmbeddedWorkflow.

        UUID of the DocumentFile for this workflow  # noqa: E501

        :param document_file_uuid: The document_file_uuid of this EmbeddedWorkflow.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and document_file_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `document_file_uuid`, must not be `None`")  # noqa: E501

        self._document_file_uuid = document_file_uuid

    @property
    def embed_type(self):
        """Gets the embed_type of this EmbeddedWorkflow.  # noqa: E501


        :return: The embed_type of this EmbeddedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._embed_type

    @embed_type.setter
    def embed_type(self, embed_type):
        """Sets the embed_type of this EmbeddedWorkflow.


        :param embed_type: The embed_type of this EmbeddedWorkflow.  # noqa: E501
        :type: str
        """
        allowed_values = ["IFRAME", "NONE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and embed_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `embed_type` ({0}), must be one of {1}"  # noqa: E501
                .format(embed_type, allowed_values)
            )

        self._embed_type = embed_type

    @property
    def created_date(self):
        """Gets the created_date of this EmbeddedWorkflow.  # noqa: E501


        :return: The created_date of this EmbeddedWorkflow.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this EmbeddedWorkflow.


        :param created_date: The created_date of this EmbeddedWorkflow.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def exit_step(self):
        """Gets the exit_step of this EmbeddedWorkflow.  # noqa: E501


        :return: The exit_step of this EmbeddedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._exit_step

    @exit_step.setter
    def exit_step(self, exit_step):
        """Sets the exit_step of this EmbeddedWorkflow.


        :param exit_step: The exit_step of this EmbeddedWorkflow.  # noqa: E501
        :type: str
        """
        allowed_values = ["TABLE_ID", "COLUMN_ID", "REVIEW", "SPREAD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and exit_step not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `exit_step` ({0}), must be one of {1}"  # noqa: E501
                .format(exit_step, allowed_values)
            )

        self._exit_step = exit_step

    @property
    def redirect_url(self):
        """Gets the redirect_url of this EmbeddedWorkflow.  # noqa: E501


        :return: The redirect_url of this EmbeddedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this EmbeddedWorkflow.


        :param redirect_url: The redirect_url of this EmbeddedWorkflow.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                redirect_url is not None and len(redirect_url) > 2500):
            raise ValueError("Invalid value for `redirect_url`, length must be less than or equal to `2500`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                redirect_url is not None and not re.search(r'^(?:[a-z0-9\.\-\+]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:\.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\Z', redirect_url)):  # noqa: E501
            raise ValueError(r"Invalid value for `redirect_url`, must be a follow pattern or equal to `/^(?:[a-z0-9\.\-\+]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:\.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\Z/`")  # noqa: E501

        self._redirect_url = redirect_url

    @property
    def ui_controls(self):
        """Gets the ui_controls of this EmbeddedWorkflow.  # noqa: E501


        :return: The ui_controls of this EmbeddedWorkflow.  # noqa: E501
        :rtype: EmbeddedWorkflowUiControls
        """
        return self._ui_controls

    @ui_controls.setter
    def ui_controls(self, ui_controls):
        """Sets the ui_controls of this EmbeddedWorkflow.


        :param ui_controls: The ui_controls of this EmbeddedWorkflow.  # noqa: E501
        :type: EmbeddedWorkflowUiControls
        """

        self._ui_controls = ui_controls

    @property
    def loaded(self):
        """Gets the loaded of this EmbeddedWorkflow.  # noqa: E501


        :return: The loaded of this EmbeddedWorkflow.  # noqa: E501
        :rtype: bool
        """
        return self._loaded

    @loaded.setter
    def loaded(self, loaded):
        """Sets the loaded of this EmbeddedWorkflow.


        :param loaded: The loaded of this EmbeddedWorkflow.  # noqa: E501
        :type: bool
        """

        self._loaded = loaded

    @property
    def load_workflow_url(self):
        """Gets the load_workflow_url of this EmbeddedWorkflow.  # noqa: E501


        :return: The load_workflow_url of this EmbeddedWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._load_workflow_url

    @load_workflow_url.setter
    def load_workflow_url(self, load_workflow_url):
        """Sets the load_workflow_url of this EmbeddedWorkflow.


        :param load_workflow_url: The load_workflow_url of this EmbeddedWorkflow.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                load_workflow_url is not None and not re.search(r'^(?:[a-z0-9\.\-\+]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:\.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\Z', load_workflow_url)):  # noqa: E501
            raise ValueError(r"Invalid value for `load_workflow_url`, must be a follow pattern or equal to `/^(?:[a-z0-9\.\-\+]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:\.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\Z/`")  # noqa: E501

        self._load_workflow_url = load_workflow_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbeddedWorkflow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmbeddedWorkflow):
            return True

        return self.to_dict() != other.to_dict()
