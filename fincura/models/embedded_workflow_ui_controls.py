# coding: utf-8

"""
    Fincura Integration API

    This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fincura.configuration import Configuration


class EmbeddedWorkflowUiControls(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'primary_button_color': 'str',
        'complete_button_label': 'str',
        'show_exit_button': 'bool'
    }

    attribute_map = {
        'primary_button_color': 'primary_button_color',
        'complete_button_label': 'complete_button_label',
        'show_exit_button': 'show_exit_button'
    }

    def __init__(self, primary_button_color=None, complete_button_label=None, show_exit_button=None, local_vars_configuration=None):  # noqa: E501
        """EmbeddedWorkflowUiControls - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._primary_button_color = None
        self._complete_button_label = None
        self._show_exit_button = None
        self.discriminator = None

        self.primary_button_color = primary_button_color
        self.complete_button_label = complete_button_label
        if show_exit_button is not None:
            self.show_exit_button = show_exit_button

    @property
    def primary_button_color(self):
        """Gets the primary_button_color of this EmbeddedWorkflowUiControls.  # noqa: E501


        :return: The primary_button_color of this EmbeddedWorkflowUiControls.  # noqa: E501
        :rtype: str
        """
        return self._primary_button_color

    @primary_button_color.setter
    def primary_button_color(self, primary_button_color):
        """Sets the primary_button_color of this EmbeddedWorkflowUiControls.


        :param primary_button_color: The primary_button_color of this EmbeddedWorkflowUiControls.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                primary_button_color is not None and len(primary_button_color) > 50):
            raise ValueError("Invalid value for `primary_button_color`, length must be less than or equal to `50`")  # noqa: E501

        self._primary_button_color = primary_button_color

    @property
    def complete_button_label(self):
        """Gets the complete_button_label of this EmbeddedWorkflowUiControls.  # noqa: E501


        :return: The complete_button_label of this EmbeddedWorkflowUiControls.  # noqa: E501
        :rtype: str
        """
        return self._complete_button_label

    @complete_button_label.setter
    def complete_button_label(self, complete_button_label):
        """Sets the complete_button_label of this EmbeddedWorkflowUiControls.


        :param complete_button_label: The complete_button_label of this EmbeddedWorkflowUiControls.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                complete_button_label is not None and len(complete_button_label) > 20):
            raise ValueError("Invalid value for `complete_button_label`, length must be less than or equal to `20`")  # noqa: E501

        self._complete_button_label = complete_button_label

    @property
    def show_exit_button(self):
        """Gets the show_exit_button of this EmbeddedWorkflowUiControls.  # noqa: E501


        :return: The show_exit_button of this EmbeddedWorkflowUiControls.  # noqa: E501
        :rtype: bool
        """
        return self._show_exit_button

    @show_exit_button.setter
    def show_exit_button(self, show_exit_button):
        """Sets the show_exit_button of this EmbeddedWorkflowUiControls.


        :param show_exit_button: The show_exit_button of this EmbeddedWorkflowUiControls.  # noqa: E501
        :type: bool
        """

        self._show_exit_button = show_exit_button

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbeddedWorkflowUiControls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmbeddedWorkflowUiControls):
            return True

        return self.to_dict() != other.to_dict()
