# coding: utf-8

"""
    Fincura Integration API

    This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fincura.configuration import Configuration


class FinancialRequirement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'name': 'str',
        'description': 'str',
        'created_date': 'datetime',
        'external_id': 'str',
        'borrower_uuid': 'str',
        'loan_uuid': 'str',
        'input_equation': 'str',
        'frequency': 'str',
        'rules': 'list[FinancialRequirementRules]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'description': 'description',
        'created_date': 'created_date',
        'external_id': 'external_id',
        'borrower_uuid': 'borrower_uuid',
        'loan_uuid': 'loan_uuid',
        'input_equation': 'input_equation',
        'frequency': 'frequency',
        'rules': 'rules'
    }

    def __init__(self, uuid=None, name=None, description=None, created_date=None, external_id=None, borrower_uuid=None, loan_uuid=None, input_equation=None, frequency=None, rules=None, local_vars_configuration=None):  # noqa: E501
        """FinancialRequirement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._name = None
        self._description = None
        self._created_date = None
        self._external_id = None
        self._borrower_uuid = None
        self._loan_uuid = None
        self._input_equation = None
        self._frequency = None
        self._rules = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.name = name
        self.description = description
        if created_date is not None:
            self.created_date = created_date
        self.external_id = external_id
        self.borrower_uuid = borrower_uuid
        if loan_uuid is not None:
            self.loan_uuid = loan_uuid
        self.input_equation = input_equation
        if frequency is not None:
            self.frequency = frequency
        if rules is not None:
            self.rules = rules

    @property
    def uuid(self):
        """Gets the uuid of this FinancialRequirement.  # noqa: E501


        :return: The uuid of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FinancialRequirement.


        :param uuid: The uuid of this FinancialRequirement.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this FinancialRequirement.  # noqa: E501

        Title of the FinancialRequirement. Must be unique for the Borrower  # noqa: E501

        :return: The name of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FinancialRequirement.

        Title of the FinancialRequirement. Must be unique for the Borrower  # noqa: E501

        :param name: The name of this FinancialRequirement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this FinancialRequirement.  # noqa: E501


        :return: The description of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FinancialRequirement.


        :param description: The description of this FinancialRequirement.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_date(self):
        """Gets the created_date of this FinancialRequirement.  # noqa: E501


        :return: The created_date of this FinancialRequirement.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this FinancialRequirement.


        :param created_date: The created_date of this FinancialRequirement.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def external_id(self):
        """Gets the external_id of this FinancialRequirement.  # noqa: E501

        External ID is used to uniquely identify a record from your system in our system. Must be unique across records.  # noqa: E501

        :return: The external_id of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this FinancialRequirement.

        External ID is used to uniquely identify a record from your system in our system. Must be unique across records.  # noqa: E501

        :param external_id: The external_id of this FinancialRequirement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 250):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `250`")  # noqa: E501

        self._external_id = external_id

    @property
    def borrower_uuid(self):
        """Gets the borrower_uuid of this FinancialRequirement.  # noqa: E501

        UUID of the borrower for this loan. (see [Borrowers](#tag/Borrowers))  # noqa: E501

        :return: The borrower_uuid of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._borrower_uuid

    @borrower_uuid.setter
    def borrower_uuid(self, borrower_uuid):
        """Sets the borrower_uuid of this FinancialRequirement.

        UUID of the borrower for this loan. (see [Borrowers](#tag/Borrowers))  # noqa: E501

        :param borrower_uuid: The borrower_uuid of this FinancialRequirement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and borrower_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `borrower_uuid`, must not be `None`")  # noqa: E501

        self._borrower_uuid = borrower_uuid

    @property
    def loan_uuid(self):
        """Gets the loan_uuid of this FinancialRequirement.  # noqa: E501

        UUID of the loan for this requirement. (see [Loans](#tag/Loans))  # noqa: E501

        :return: The loan_uuid of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._loan_uuid

    @loan_uuid.setter
    def loan_uuid(self, loan_uuid):
        """Sets the loan_uuid of this FinancialRequirement.

        UUID of the loan for this requirement. (see [Loans](#tag/Loans))  # noqa: E501

        :param loan_uuid: The loan_uuid of this FinancialRequirement.  # noqa: E501
        :type: str
        """

        self._loan_uuid = loan_uuid

    @property
    def input_equation(self):
        """Gets the input_equation of this FinancialRequirement.  # noqa: E501


        :return: The input_equation of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._input_equation

    @input_equation.setter
    def input_equation(self, input_equation):
        """Sets the input_equation of this FinancialRequirement.


        :param input_equation: The input_equation of this FinancialRequirement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and input_equation is None:  # noqa: E501
            raise ValueError("Invalid value for `input_equation`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                input_equation is not None and len(input_equation) > 1200):
            raise ValueError("Invalid value for `input_equation`, length must be less than or equal to `1200`")  # noqa: E501

        self._input_equation = input_equation

    @property
    def frequency(self):
        """Gets the frequency of this FinancialRequirement.  # noqa: E501


        :return: The frequency of this FinancialRequirement.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this FinancialRequirement.


        :param frequency: The frequency of this FinancialRequirement.  # noqa: E501
        :type: str
        """
        allowed_values = ["MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "TTM", "FISCAL_YTD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def rules(self):
        """Gets the rules of this FinancialRequirement.  # noqa: E501


        :return: The rules of this FinancialRequirement.  # noqa: E501
        :rtype: list[FinancialRequirementRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this FinancialRequirement.


        :param rules: The rules of this FinancialRequirement.  # noqa: E501
        :type: list[FinancialRequirementRules]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FinancialRequirement):
            return True

        return self.to_dict() != other.to_dict()
