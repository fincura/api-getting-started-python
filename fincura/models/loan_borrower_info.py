# coding: utf-8

"""
    Fincura Integration API

    This [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) allows you to interact with the Fincura processing and insights engine.   # Authentication  This API uses API keys generated from a Fincura User account. To get access to your User account, speak with you Fincura account manager.  # Accepted Media Types  | File&nbsp;Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Extension(s)     | Content-Type(s) | | -------------------------------- |-------------- | ------------ | | PDF File | .pdf | `application/pdf` , `application/x-pdf` | | Excel File | .xls | `application/vnd.ms-excel`  | | Excel File | .xlsx | `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`  | | PNG Image | .png | `image/png`  | | GIF Image | .gif | `image/gif`  | | JPG Image | .jpg, .jpeg | `image/jpeg`  | | GIF Image | .gif | `image/gif`  |   # Getting Started  1. [Create a Borrower](#operation/createBorrower)  2. [Add a file](#operation/createDocumentFile) for that Borrower. 3. Analyze in the Fincura App  ****  # noqa: E501

    The version of the OpenAPI document: 1.2.3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fincura.configuration import Configuration


class LoanBorrowerInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'industry': 'str',
        'naics_code': 'int',
        'address': 'str',
        'city': 'str',
        'state': 'str',
        'zipcode': 'str',
        'country': 'str',
        'email': 'str',
        'management_team': 'str',
        'dun_bradstreet_score': 'int',
        'paynet_score': 'str'
    }

    attribute_map = {
        'name': 'name',
        'industry': 'industry',
        'naics_code': 'naics_code',
        'address': 'address',
        'city': 'city',
        'state': 'state',
        'zipcode': 'zipcode',
        'country': 'country',
        'email': 'email',
        'management_team': 'management_team',
        'dun_bradstreet_score': 'dun_bradstreet_score',
        'paynet_score': 'paynet_score'
    }

    def __init__(self, name=None, industry=None, naics_code=None, address=None, city=None, state=None, zipcode=None, country=None, email=None, management_team=None, dun_bradstreet_score=None, paynet_score=None, local_vars_configuration=None):  # noqa: E501
        """LoanBorrowerInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._industry = None
        self._naics_code = None
        self._address = None
        self._city = None
        self._state = None
        self._zipcode = None
        self._country = None
        self._email = None
        self._management_team = None
        self._dun_bradstreet_score = None
        self._paynet_score = None
        self.discriminator = None

        self.name = name
        self.industry = industry
        self.naics_code = naics_code
        self.address = address
        self.city = city
        self.state = state
        self.zipcode = zipcode
        if country is not None:
            self.country = country
        self.email = email
        self.management_team = management_team
        self.dun_bradstreet_score = dun_bradstreet_score
        self.paynet_score = paynet_score

    @property
    def name(self):
        """Gets the name of this LoanBorrowerInfo.  # noqa: E501


        :return: The name of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoanBorrowerInfo.


        :param name: The name of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 500):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `500`")  # noqa: E501

        self._name = name

    @property
    def industry(self):
        """Gets the industry of this LoanBorrowerInfo.  # noqa: E501


        :return: The industry of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this LoanBorrowerInfo.


        :param industry: The industry of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and industry is None:  # noqa: E501
            raise ValueError("Invalid value for `industry`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                industry is not None and len(industry) > 255):
            raise ValueError("Invalid value for `industry`, length must be less than or equal to `255`")  # noqa: E501

        self._industry = industry

    @property
    def naics_code(self):
        """Gets the naics_code of this LoanBorrowerInfo.  # noqa: E501


        :return: The naics_code of this LoanBorrowerInfo.  # noqa: E501
        :rtype: int
        """
        return self._naics_code

    @naics_code.setter
    def naics_code(self, naics_code):
        """Sets the naics_code of this LoanBorrowerInfo.


        :param naics_code: The naics_code of this LoanBorrowerInfo.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                naics_code is not None and naics_code > 999999):  # noqa: E501
            raise ValueError("Invalid value for `naics_code`, must be a value less than or equal to `999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                naics_code is not None and naics_code < 0):  # noqa: E501
            raise ValueError("Invalid value for `naics_code`, must be a value greater than or equal to `0`")  # noqa: E501

        self._naics_code = naics_code

    @property
    def address(self):
        """Gets the address of this LoanBorrowerInfo.  # noqa: E501


        :return: The address of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LoanBorrowerInfo.


        :param address: The address of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this LoanBorrowerInfo.  # noqa: E501


        :return: The city of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LoanBorrowerInfo.


        :param city: The city of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and city is None:  # noqa: E501
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                city is not None and len(city) > 255):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `255`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this LoanBorrowerInfo.  # noqa: E501


        :return: The state of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LoanBorrowerInfo.


        :param state: The state of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                state is not None and len(state) > 50):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `50`")  # noqa: E501

        self._state = state

    @property
    def zipcode(self):
        """Gets the zipcode of this LoanBorrowerInfo.  # noqa: E501


        :return: The zipcode of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this LoanBorrowerInfo.


        :param zipcode: The zipcode of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and zipcode is None:  # noqa: E501
            raise ValueError("Invalid value for `zipcode`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                zipcode is not None and len(zipcode) > 20):
            raise ValueError("Invalid value for `zipcode`, length must be less than or equal to `20`")  # noqa: E501

        self._zipcode = zipcode

    @property
    def country(self):
        """Gets the country of this LoanBorrowerInfo.  # noqa: E501


        :return: The country of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LoanBorrowerInfo.


        :param country: The country of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                country is not None and len(country) > 255):
            raise ValueError("Invalid value for `country`, length must be less than or equal to `255`")  # noqa: E501

        self._country = country

    @property
    def email(self):
        """Gets the email of this LoanBorrowerInfo.  # noqa: E501


        :return: The email of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LoanBorrowerInfo.


        :param email: The email of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def management_team(self):
        """Gets the management_team of this LoanBorrowerInfo.  # noqa: E501


        :return: The management_team of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._management_team

    @management_team.setter
    def management_team(self, management_team):
        """Sets the management_team of this LoanBorrowerInfo.


        :param management_team: The management_team of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """

        self._management_team = management_team

    @property
    def dun_bradstreet_score(self):
        """Gets the dun_bradstreet_score of this LoanBorrowerInfo.  # noqa: E501


        :return: The dun_bradstreet_score of this LoanBorrowerInfo.  # noqa: E501
        :rtype: int
        """
        return self._dun_bradstreet_score

    @dun_bradstreet_score.setter
    def dun_bradstreet_score(self, dun_bradstreet_score):
        """Sets the dun_bradstreet_score of this LoanBorrowerInfo.


        :param dun_bradstreet_score: The dun_bradstreet_score of this LoanBorrowerInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and dun_bradstreet_score is None:  # noqa: E501
            raise ValueError("Invalid value for `dun_bradstreet_score`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                dun_bradstreet_score is not None and dun_bradstreet_score > 100):  # noqa: E501
            raise ValueError("Invalid value for `dun_bradstreet_score`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                dun_bradstreet_score is not None and dun_bradstreet_score < 0):  # noqa: E501
            raise ValueError("Invalid value for `dun_bradstreet_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._dun_bradstreet_score = dun_bradstreet_score

    @property
    def paynet_score(self):
        """Gets the paynet_score of this LoanBorrowerInfo.  # noqa: E501


        :return: The paynet_score of this LoanBorrowerInfo.  # noqa: E501
        :rtype: str
        """
        return self._paynet_score

    @paynet_score.setter
    def paynet_score(self, paynet_score):
        """Sets the paynet_score of this LoanBorrowerInfo.


        :param paynet_score: The paynet_score of this LoanBorrowerInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and paynet_score is None:  # noqa: E501
            raise ValueError("Invalid value for `paynet_score`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                paynet_score is not None and len(paynet_score) > 50):
            raise ValueError("Invalid value for `paynet_score`, length must be less than or equal to `50`")  # noqa: E501

        self._paynet_score = paynet_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanBorrowerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoanBorrowerInfo):
            return True

        return self.to_dict() != other.to_dict()
